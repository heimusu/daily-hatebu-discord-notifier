name: Daily Random Hatena Bookmark
on:
  schedule:
    - cron:  '0 22 * * *'     # JST 07:00
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install deps
        run: npm install rss-parser axios

      - name: Pick & notify Discord
        env:
          RSS_URL: "https://b.hatena.ne.jp/${{ secrets.HATEBU_USER }}/bookmark.rss"
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          node <<'JS'
          const axios  = require('axios');
          const Parser = require('rss-parser');

          // ---- Ë®≠ÂÆöÂÄ§ ----
          const RSS_BASE = process.env.RSS_URL;          // 1 „Éö„Éº„Ç∏ÁõÆ URL
          const PAGE_MAX = 5;                            // 20 ‰ª∂ √ó 5 Ôºù 100 ‰ª∂
          const PICK_NUM = 5;                            // Discord „Å∏ÈÄÅ„Çã‰ª∂Êï∞
          const parser   = new Parser();                 // Âé≥Ê†º„É¢„Éº„Éâ„ÅÆ„Åæ„Åæ„Åß OK

          // "&" „Çí‰øÆÊ≠£„Åô„ÇãÁ∞°Êòì„Éï„Ç£„É´„Çø
          const fix = (xml) => xml.replace(/&(?!#?\w+;)/g, '&amp;');

          // ---- RSS „Çí„Åæ„Å®„ÇÅ„Å¶ÂèñÂæó ----
          const fetchPage = async (page) => {
            const url = page === 1 ? RSS_BASE : `${RSS_BASE}?page=${page}`;
            const res = await axios.get(url, { responseType: 'text', maxRedirects: 5 });
            if (!/^<\?xml|<rss|<rdf:RDF/i.test(res.data.trim())) {
              throw new Error(`Not RSS ‚Äì URL „ÅãÂÖ¨ÈñãË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n${url}`);
            }
            const feed = await parser.parseString(fix(res.data));
            return feed.items ?? [];
          };

          (async () => {
            // ÊúÄÂ§ß PAGE_MAX „Éö„Éº„Ç∏ÂèñÂæóÔºà‰∏¶ÂàóÔºâ
            const pages   = Array.from({ length: PAGE_MAX }, (_, i) => i + 1);
            const results = (await Promise.all(pages.map(fetchPage))).flat();

            // 100 ‰ª∂„Å´Ê∫Ä„Åü„Å™„ÅÑÂ†¥Âêà„Åß„ÇÇ slice „ÅßÂÆâÂÖ®
            const pool = results.slice(0, PAGE_MAX * 20);
            if (!pool.length) throw new Error('ÂÖ¨Èñã„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Åå 0 ‰ª∂„Åß„Åô');

            // ---- „É©„É≥„ÉÄ„É†„Å´ PICK_NUM ‰ª∂ÈÅ∏Êäû ----
            const picks = [];
            while (picks.length < Math.min(PICK_NUM, pool.length)) {
              const idx = Math.floor(Math.random() * pool.length);
              picks.push(...pool.splice(idx, 1)); // ÊäΩÂá∫„Åó„Åü item „ÇíÈô§Âéª
            }

            // ---- Discord „Å∏ÈÄÅ‰ø° ----
            await axios.post(process.env.DISCORD_WEBHOOK_URL, {
              username: 'Hatena Random',
              avatar_url: 'https://b.hatena.ne.jp/favicon.ico',
              content: `üé≤ ‰ªäÊó•„ÅÆ„ÅØ„Å¶„ÉñÔºàÂÖ® ${pool.length + picks.length} ‰ª∂‰∏≠„É©„É≥„ÉÄ„É† ${picks.length} ‰ª∂Ôºâ`,
              embeds: picks.map((it) => ({
                title: it.title,
                url:   it.link,
                description: (it.contentSnippet || '').slice(0, 180),
                footer: { text: 'Êèê‰æõ: GitHub Actions' }
              }))
            });

            console.log('Sent', picks.length, 'items');
          })().catch(err => {
            console.error('FAIL', err.message || err);
            process.exit(1);
          }); 
          JS

